generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Post content
  type       PostType
  content    String?
  visibility PostVisibility @default(PUBLIC)
  status     PostStatus @default(PUBLISHED)

  // Author info (denormalized for performance)
  authorId          String
  authorDisplayName String
  authorAvatarUrl   String?
  authorRole        String
  authorDepartment  String?
  authorCollegeId   String

  // Engagement metrics
  likeCount    Int @default(0)
  commentCount Int @default(0)
  shareCount   Int @default(0)
  viewCount    Int @default(0)

  // Type-specific data (JSON fields)
  badgeData         Json?
  collaborationData Json? // { skills: string[], capacity: number, deadline: string }
  projectData       Json? // { title: string, milestone: string, progress: number, githubUrl?: string, demoUrl?: string, techStack: string[] }
  eventData         Json? // { title: string, date: string, location: string, eventType: string, registrationRequired: boolean, capacity?: number, registrationUrl?: string }
  jobData           Json?

  // Relations
  media     PostMedia[]
  tags      PostTag[]
  links     PostLink[]
  likes     PostLike[]
  comments  PostComment[]
  shares    PostShare[]
  views     PostView[]
  bookmarks PostBookmark[]

  @@map("posts")
}

model PostMedia {
  id     String @id @default(uuid())
  postId String
  mediaId String
  order  Int    @default(0)

  post  Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  media Media @relation(fields: [mediaId], references: [id])

  @@unique([postId, mediaId])
  @@map("post_media")
}

model Media {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  url       String
  mimeType  String
  sizeBytes Int
  width     Int?
  height    Int?
  
  // Upload info
  storageKey String
  ownerUserId String

  // Relations
  posts PostMedia[]

  @@map("media")
}

model PostTag {
  id     String @id @default(uuid())
  postId String
  tag    String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, tag])
  @@map("post_tags")
}

model PostLink {
  id     String @id @default(uuid())
  postId String
  url    String
  title  String?
  order  Int    @default(0)

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("post_links")
}

model PostLike {
  id       String   @id @default(uuid())
  postId   String
  userId   String
  likedAt  DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_likes")
}

model PostComment {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())

  // User info (denormalized)
  userDisplayName String
  userAvatarUrl   String?

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("post_comments")
}

model PostShare {
  id       String   @id @default(uuid())
  postId   String
  userId   String
  sharedAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_shares")
}

model PostView {
  id       String   @id @default(uuid())
  postId   String
  userId   String?  // null for anonymous views
  viewedAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("post_views")
}

model UserFollow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  followedAt  DateTime @default(now())

  @@unique([followerId, followingId])
  @@map("user_follows")
}

model PostBookmark {
  id           String   @id @default(uuid())
  postId       String
  userId       String
  bookmarkedAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_bookmarks")
}

// Enums
enum PostType {
  GENERAL
  BADGE_AWARD
  PROJECT_UPDATE
  COLLABORATION
  JOB_POSTING
  EVENT
  ANNOUNCEMENT
  SHARE
  PROJECT_SHOWCASE
  RESEARCH_PAPER
  EVENT_HIGHLIGHT
  AD
}

enum PostVisibility {
  PUBLIC
  COLLEGE
  DEPARTMENT
  PRIVATE
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
